{"version":3,"file":"static/js/33.1a9614a1.chunk.js","mappings":"4JAmBA,IAjBgB,SAAC,GAAmB,IAAjBA,EAAgB,EAAhBA,UACjB,OACE,SAAC,KAAD,CACEC,QAASD,EACTE,OAAO,KACPC,MAAM,KACNC,UAAU,cACVC,aAAc,CACZC,QAAS,QACTC,UAAW,MACXC,WAAY,OACZC,YAAa,SAIpB,C,sHCdYC,EAAOC,EAAAA,EAAAA,GAAH,sBAEJC,EAAKD,EAAAA,EAAAA,GAAH,sBAEFE,GAAQF,EAAAA,EAAAA,GAAOG,EAAAA,GAAPH,CAAH,sBAELI,EAAOJ,EAAAA,EAAAA,IAAH,sBAEJK,EAAML,EAAAA,EAAAA,IAAH,sB,SCiChB,EAvCmB,SAAC,GAAgB,IAAdM,EAAa,EAAbA,OACdC,GAAWC,EAAAA,EAAAA,MACjB,OACE,iCACE,SAACT,EAAD,UACGO,EAAOG,KAAI,YAAiC,IAA9BC,EAA6B,EAA7BA,GAAIC,EAAyB,EAAzBA,MAAOC,EAAkB,EAAlBA,YACxB,OACE,SAACX,EAAD,WACE,SAACC,EAAD,CAAOW,GAAE,kBAAaH,GAAMI,MAAO,CAAEC,KAAMR,GAA3C,UACE,UAACH,EAAD,WACGQ,GACC,SAACP,EAAD,CACEW,IAAG,yCAAoCJ,GACvCK,IAAKN,KAGP,SAAC,MAAD,CAAoBO,KAAM,MAE3BP,QAXED,EAgBZ,OAEH,SAAC,KAAD,MAGL,C,0HC/BYS,E,QAAYnB,EAAAA,GAAH,8F,SCatB,EAZc,SAAC,GAAe,IAAbW,EAAY,EAAZA,MACf,OACE,+BACE,SAACQ,EAAD,UAAYR,KAGjB,E,SCqBD,EAxBa,WACX,OAA4BS,EAAAA,EAAAA,UAAS,IAArC,eAAOd,EAAP,KAAee,EAAf,KACA,GAA4BD,EAAAA,EAAAA,WAAS,GAArC,eAAOE,EAAP,KAAeC,EAAf,KAaA,OAXAC,EAAAA,EAAAA,YAAU,WACRD,GAAU,IACVE,EAAAA,EAAAA,MACGC,MAAK,YAAkB,IAAfC,EAAc,EAAdA,QACPN,EAAUM,EACX,IACAC,SAAQ,WACPL,GAAU,EACX,GACJ,GAAE,KAGD,iCACE,SAAC,EAAD,CAAOZ,MAAM,oBACb,SAACkB,EAAA,EAAD,CAAYvB,OAAQA,IACnBgB,IAAU,SAACQ,EAAA,EAAD,MAGhB,C,0HC1BDC,EAAAA,EAAAA,SAAAA,QAAyB,gCAEzB,IAAMC,EAAU,mCAEHP,EAAa,mCAAG,oGACTM,EAAAA,EAAAA,IAAA,qCAAwCC,IAD/B,cACrBC,EADqB,yBAEpBA,EAAIC,MAFgB,2CAAH,qDAKbC,EAAiB,mCAAG,WAAMC,GAAN,uFACbL,EAAAA,EAAAA,IAAA,+BACQC,EADR,4DACmEI,IAFtD,cACzBH,EADyB,yBAIxBA,EAAIC,MAJoB,2CAAH,qD","sources":["components/Loader/Loader.jsx","components/MoviesList/MoviesList.styled.js","components/MoviesList/MoviesList.jsx","components/Title/Title.styled.js","components/Title/Title.jsx","pages/Home.jsx","service/fetchAPI.js"],"sourcesContent":["import { Dna } from 'react-loader-spinner';\n\n const Loader = ({ isLoading }) => {\n  return (\n    <Dna\n      visible={isLoading}\n      height=\"80\"\n      width=\"80\"\n      ariaLabel=\"dna-loading\"\n      wrapperStyle={{\n        display: 'block',\n        marginTop: '5px',\n        marginLeft: 'auto',\n        marginRight: 'auto',\n      }}\n    />\n  );\n};\n\nexport default Loader;","import styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\n\nexport const List = styled.ul``;\n\nexport const Li = styled.li``;\n\nexport const Links = styled(Link)``;\n\nexport const Card = styled.div``;\n\nexport const Img = styled.img``;\n","import PropTypes from 'prop-types';\nimport { Outlet, useLocation } from 'react-router-dom';\nimport { AiOutlineFileImage } from 'react-icons/ai';\nimport { List, Li, Links, Card ,Img} from './MoviesList.styled';\n\nconst MoviesList = ({ movies }) => {\n  const location = useLocation();\n  return (\n    <>\n      <List>\n        {movies.map(({ id, title, poster_path }) => {\n          return (\n            <Li key={id}>\n              <Links to={`/movies/${id}`} state={{ from: location }}>\n                <Card>\n                  {poster_path ? (\n                    <Img\n                      src={`https://image.tmdb.org/t/p/w200${poster_path}`}\n                      alt={title}\n                    />\n                  ) : (\n                    <AiOutlineFileImage size={200} />\n                  )}\n                  {title}\n                </Card>\n              </Links>\n            </Li>\n          );\n        })}\n      </List>\n      <Outlet />\n    </>\n  );\n};\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n    })\n  ),\n};\n\nexport default MoviesList;\n","import styled from '@emotion/styled';\n\nexport const TitleText = styled.h2`\n  text-align: center;\n  padding-top: 20px;\n  padding-bottom: 20px;\n`;\n","import PropTypes from 'prop-types';\nimport { TitleText } from './Title.styled';\n\nconst Title = ({ title }) => {\n  return (\n    <>\n      <TitleText>{title}</TitleText>\n    </>\n  );\n};\n\nTitle.propTypes = {\n  title: PropTypes.string.isRequired,\n};\n\nexport default Title;\n","import { useState, useEffect } from 'react';\nimport { fetchTrending } from '../service/fetchAPI';\nimport MoviesList from 'components/MoviesList/MoviesList';\nimport Title from '../components/Title/Title';\nimport  Loader  from 'components/Loader/Loader';\n\nconst Home = () => {\n  const [movies, setMovies] = useState([]);\n  const [loader, setLoader] = useState(false);\n\n  useEffect(() => {\n    setLoader(true);\n    fetchTrending()\n      .then(({ results }) => {\n        setMovies(results);\n      })\n      .finally(() => {\n        setLoader(false);\n      });\n  }, []);\n\n  return (\n    <>\n      <Title title=\"Trending today\" />\n      <MoviesList movies={movies} />\n      {loader && <Loader />}\n    </>\n  );\n};\n\nexport default Home;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nconst API_KEY = '992758a4802a699e8df27d4d6efc34fb';\n\nexport const fetchTrending = async () => {\n  const res = await axios.get(`trending/movie/day?api_key=${API_KEY}`);\n  return res.data;\n};\n\nexport const fetchSearchMovies = async query => {\n  const res = await axios.get(\n    `search/movie?api_key=${API_KEY}&language=en-US&page=1&include_adult=false&query=${query}`\n  );\n  return res.data;\n};\n\nexport const fetchDetailsMovie = async movieId => {\n  const res = await axios.get(\n    `movie/${movieId}?api_key=${API_KEY}&language=en-US`\n  );\n  return res.data;\n};\n\nexport const fetchCast = async movieId => {\n  const res = await axios.get(\n    `movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  return res.data;\n};\n\nexport const fetchReviews = async movieId => {\n  const res = await axios.get(\n    `movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n  return res.data;\n};\n"],"names":["isLoading","visible","height","width","ariaLabel","wrapperStyle","display","marginTop","marginLeft","marginRight","List","styled","Li","Links","Link","Card","Img","movies","location","useLocation","map","id","title","poster_path","to","state","from","src","alt","size","TitleText","useState","setMovies","loader","setLoader","useEffect","fetchTrending","then","results","finally","MoviesList","Loader","axios","API_KEY","res","data","fetchSearchMovies","query"],"sourceRoot":""}